#!/bin/bash

# new: a script for making new files and directories

VALID='^[[:alnum:],_\/.\s]*$'  # matches alphanumeric, whitespace and ',./'
HOME=$(pwd)                   # our origin dir, so we can return here later

# function for making and traversing directories
create_dirs () {
  #  We match from the end of our positional parameter to the first instance
  #+ of '/' we find (${1%/*}), then pass this match as a here string (<<<)
  #+ to read, where our IFS separates our remaining string by each '/'
  #+ then assigns the split elements to new_dirs.
  IFS="/" read new_dirs <<< ${1%/*}
  # for each element now in $new_dirs...
  for i in $new_dirs; do
    # we see if $i exists, otherwise we make dir $i and check again
    if [ -d "$i" ] || mkdir "$i" && [ -d "$i" ]; then
      # if all goes well, we step inside our dir and continue the process
      cd $i
    fi
  done
}

# function for making files
create_files () {
  #  We once again match our positional parameter, this time stripping from
  #+ the beginning of our string to the last instance of '/', then pass it
  #+ as a here string (<<<) to read, where our IFS separates our string by
  #+ each ',' then assigns the elements to new_files.
  IFS="," read new_files <<< ${1##*/}
  # for each element now in $new_files...
  for i in $new_files; do
    # if $i does NOT already exist...
    if [ ! -e "$i" ]; then
      # we create file $i and check if it now exists
      touch "$i" && [ -e "$i" ]
    fi
  done
}

# MAIN PROCESS
#  Implicitly, we pass a set of strings to this script. Our strings are now
#+ positional parameters, though we're only concerned with the first one ($1)
#+ at any given time. '$#' gives us the total number of positional paramets
#+ we have, so while $# is greater than zero...
while [[ $# -gt 0 ]]; do
  # if $1 matches a VALID string and its length isn't zero...
  if [[ "$1" =~ $VALID ]] && [ ! -z "$1" ]; then
    # if $1 finds any instances of '/'...
    if [[ $1 =~ \/ ]]; then
      # we create some directories!
      create_dirs "$1"
    fi
    #  if the length of $1 is greater than zero after we remove all
    #+ elements before the last match of '/'...
    if [ -n ${1##*/} ]; then
      # we create some files!
      create_files "$1"
    fi
    #  Right now, if we've created any directories, we're inside them,
    #+ so we go back to our staring directory...
    cd $HOME
    #  then delete this instance of $1 and shift $2 into it, if it exists,
    #+ and continue our loop.
    shift
  # if we get passed an empty string...
  elif [ -z "$1" ]; then
    # we tell standard error (>&@) and exit the program.
    echo "No arguments received." >&2
    exit 1
  else
    # if all fails, an invalid character was probably used.
    echo "Invalid character used." >&2
    exit 1
  fi
done
